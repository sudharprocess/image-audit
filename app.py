# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TDOqb5LA120VmbTHKhuS2maL7eeXIpOD
"""

import streamlit as st
import pandas as pd
from datetime import datetime
from io import BytesIO

st.set_page_config(layout="wide")
st.title("📸 Auditor Image Review Dashboard")

uploaded_file = st.file_uploader("Upload the CSV file", type=["csv"])
if not uploaded_file:
    st.stop()

usecols = ['Date', 'Outlet Code', 'Outlet Name', 'Distributor Code', 'Distributor Name', 'Salesman',
           'SDE', 'ASM', 'route_name', 'Is the outlet present or absent?', 'Absent Reason',
           'Image 1', 'Image 2', 'Image 3', 'Image 4', 'Image 5', 'Image 6', 'Auditor Name']
try:
    df = pd.read_csv(uploaded_file, encoding='ISO-8859-1', usecols=usecols)
except Exception as e:
    st.error(f"Error reading file: {e}")
    st.stop()

df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
df = df.dropna(subset=['Date'])

# Filters
with st.form(key="filters"):
    col1, col2, col3 = st.columns(3)
    with col1:
        dist_code = st.selectbox("🏢 Distributor Code", ['All'] + sorted(df['Distributor Code'].dropna().unique().astype(str)))
        route_name = st.selectbox("🛣️ Route Name", ['All'] + sorted(df['route_name'].dropna().unique().astype(str)))
        asm = st.selectbox("👔 ASM", ['All'] + sorted(df['ASM'].dropna().unique().astype(str)))
    with col2:
        sde = st.selectbox("👨‍💼 SDE", ['All'] + sorted(df['SDE'].dropna().unique().astype(str)))
        auditor = st.selectbox("🕵️ Auditor Name", ['All'] + sorted(df['Auditor Name'].dropna().unique().astype(str)))
        absent = st.selectbox("❌ Absent Reason", ['All'] + sorted(df['Absent Reason'].dropna().unique().astype(str)))
    with col3:
        outlet = st.selectbox("🏬 Outlet Name", ['All'] + sorted(df['Outlet Name'].dropna().unique().astype(str)))
        salesman = st.selectbox("🧍 Salesman", ['All'] + sorted(df['Salesman'].dropna().unique().astype(str)))
        from_date = st.date_input("📅 From Date", value=df['Date'].min().date())
        to_date = st.date_input("📅 To Date", value=df['Date'].max().date())

    global_search = st.text_input("🔍 Search across all columns")
    col4, col5 = st.columns(2)
    with col4:
        apply = st.form_submit_button("✅ Apply Filters")
    with col5:
        reset = st.form_submit_button("🔄 Reset Filters")

if reset:
    st.experimental_rerun()

filtered = df.copy()
if apply:
    if dist_code != 'All':
        filtered = filtered[filtered['Distributor Code'] == dist_code]
    if route_name != 'All':
        filtered = filtered[filtered['route_name'] == route_name]
    if asm != 'All':
        filtered = filtered[filtered['ASM'] == asm]
    if sde != 'All':
        filtered = filtered[filtered['SDE'] == sde]
    if auditor != 'All':
        filtered = filtered[filtered['Auditor Name'] == auditor]
    if absent != 'All':
        filtered = filtered[filtered['Absent Reason'] == absent]
    if outlet != 'All':
        filtered = filtered[filtered['Outlet Name'] == outlet]
    if salesman != 'All':
        filtered = filtered[filtered['Salesman'] == salesman]
    filtered = filtered[(filtered['Date'].dt.date >= from_date) & (filtered['Date'].dt.date <= to_date)]
    if global_search:
        global_search = global_search.lower()
        filtered = filtered[filtered.apply(lambda row: row.astype(str).str.lower().str.contains(global_search).any(), axis=1)]

# Pagination
page_size = 10
total_pages = (len(filtered) - 1) // page_size + 1
page_num = st.number_input("Page", min_value=1, max_value=total_pages, step=1)
start = (page_num - 1) * page_size
end = start + page_size
paginated_df = filtered.iloc[start:end].copy()

# Download filtered data
buffer = BytesIO()
filtered.to_excel(buffer, index=False)
st.download_button("📥 Download Filtered Excel", data=buffer.getvalue(), file_name="filtered_data.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# Display data with images
for idx, row in paginated_df.iterrows():
    st.markdown("---")
    st.markdown(f" 🔢 S.No: {idx+1}")
    st.markdown(f"### 🕵️ Auditor: **{row['Auditor Name']}**")
    st.markdown(f"""
    - 📅 Date: {row['Date'].date()}
    - 🏢 Distributor: {row['Distributor Name']} ({row['Distributor Code']})
    - 🛣️ Route: {row['route_name']}
    - 🧍 Salesman: {row['Salesman']}
    - 🧑‍💼 SDE: {row['SDE']} | 👔 ASM: {row['ASM']}
    - 🏬 Outlet Name: {row['Outlet Name']} | Code: {row['Outlet Code']}
    - ❌ Absent Reason: {row['Absent Reason']}
    """)

    img_cols = st.columns(6)
    for i, img_col in enumerate(['Image 1', 'Image 2', 'Image 3', 'Image 4', 'Image 5', 'Image 6']):
        if img_col in row and pd.notna(row[img_col]) and str(row[img_col]).strip() != "":
            img_cols[i].image(row[img_col], caption=img_col, use_container_width=True)
        else:
            img_cols[i].write("📷 Image not available")